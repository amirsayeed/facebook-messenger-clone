{"version":3,"sources":["Message.js","firebase.js","App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Message","forwardRef","ref","message","isUser","username","className","Card","CardContent","Typography","color","variants","components","db","firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","App","useState","input","setInput","messages","setMessages","setUsername","useEffect","collection","orderBy","onSnapshot","snapshot","docs","map","doc","id","data","prompt","src","alt","FormControl","Input","placeholder","value","onChange","event","target","IconButton","disabled","variant","type","onClick","preventDefault","add","timestamp","FieldValue","serverTimestamp","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.8fe0d8de.chunk.js","sourcesContent":["import { Card, CardContent, Typography } from '@material-ui/core'\r\nimport React, { forwardRef } from 'react'\r\nimport './Message.css';\r\nconst Message = forwardRef(({message, username }, ref) => {\r\n  const isUser = username === message.username;\r\n  return (\r\n    <div ref={ref} className={`message ${isUser && 'message__user'}`}>\r\n      <Card className={isUser ? \"message__userCard\" : \"message__guestCard\"}>\r\n      <CardContent>\r\n        <Typography\r\n        color=\"white\"\r\n        variants=\"h5\" \r\n        components=\"h2\"\r\n        >\r\n         {!isUser && `${message.username || 'Unknown User'}: `} {message.message}\r\n        </Typography>\r\n      </CardContent>\r\n    </Card>  \r\n    </div>   \r\n  )\r\n}\r\n)\r\nexport default Message\r\n","import firebase from \"firebase\";\r\n\r\nconst firebaseApp = firebase.initializeApp({\r\n // For Firebase JS SDK v7.20.0 and later, measurementId is optional\r\n  apiKey: \"AIzaSyCl2CZArlv5rV4JvsY9NRPbqbOd8HJxT8s\",\r\n  authDomain: \"facebook-messenger-clone-7289d.firebaseapp.com\",\r\n  projectId: \"facebook-messenger-clone-7289d\",\r\n  storageBucket: \"facebook-messenger-clone-7289d.appspot.com\",\r\n  messagingSenderId: \"136899198047\",\r\n  appId: \"1:136899198047:web:e45646e2d7d2990f44efea\",\r\n  measurementId: \"G-CXQWJ676EB\"\r\n\r\n});\r\n\r\nconst db = firebaseApp.firestore();\r\n\r\nexport default db;","import React,{ useEffect, useState } from 'react';\nimport './App.css';\nimport {FormControl, Input } from '@material-ui/core';\nimport Message from './Message';\nimport db from './firebase';\nimport firebase from 'firebase';\nimport FlipMove from 'react-flip-move';\nimport SendIcon from '@material-ui/icons/Send';\nimport { IconButton } from '@material-ui/core';\nfunction App() {\n  const [input, setInput] = useState('');\n  const [messages, setMessages] = useState([]);\n  const [username, setUsername] = useState('');\n\n  useEffect(() => {\n  db.collection('messages')\n  .orderBy('timestamp', 'desc')\n  .onSnapshot(snapshot => {\n    setMessages(snapshot.docs.map(doc => ({id: doc.id,message: doc.data()})))\n  });\n  }, [] )\n  \n  useEffect(() => {\n    setUsername(prompt('Please enter your name'));\n  }, [] )\n\n  const sendMessage = (event) => {\n   event.preventDefault();\n   db.collection('messages').add({\n     message: input, \n     username: username,\n     timestamp: firebase.firestore.FieldValue.serverTimestamp()\n   })\n   \n   setInput('');\n  }\n  return (\n    <div className=\"App\">\n      <img src=\"https://facebookbrand.com/wp-content/uploads/2018/09/Header-e1538151782912.png?w=100&h=100\" alt=\"\" />\n      <h1>Hello SayeedðŸš€!</h1>\n      <h2>Welcome {username}</h2>\n      <form className=\"app__form\">\n        <FormControl className=\"app__formControl\">\n        <Input className=\"app__input\" placeholder='Enter a message...' value={input} onChange={event => setInput(event.target.value)}/>\n        <IconButton className=\"app__iconButton\" disabled={!input} variant=\"contained\" color=\"primary\" type='submit' onClick={sendMessage}>\n        <SendIcon />       \n        </IconButton>    \n        </FormControl>      \n      </form>    \n    <FlipMove>\n    {\n        messages.map(({id, message}) => (\n       <Message key={id} username={username} message={message} />\n      ))\n    } \n    </FlipMove>    \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}